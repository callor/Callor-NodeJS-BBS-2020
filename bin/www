#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-callor-lotto-statistics:server');
var http = require('http');
var https = require('https')
var fs = require('fs')

var httpPort = normalizePort(process.env.PORT || '12701');
app.set('httpPort', httpPort);


var httpsPort = normalizePort(process.env.PORT || '12700');
app.set('httpsPort', httpsPort);

var options = {
	    key: fs.readFileSync('C:/perm/callor.com/privkey1.pem'),
	    cert: fs.readFileSync('C:/perm/callor.com/cert1.pem'),
	    ca: fs.readFileSync('C:/perm/callor.com/chain1.pem')
};

var httpServer = http.createServer(app);
var httpsServer = https.createServer(options,app);
httpsServer.listen(httpsPort)

httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening);


httpsServer.on('listening', httpsOnListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.httpPort;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}

function httpsOnListening() {
	  var addr = httpsServer.address();
//	  var bind = typeof addr === 'string'
//	    ? 'pipe ' + addr
//	    : 'port ' + addr.httpsPort;
	  // console.log('Listening on ' + bind);
	  console.log('HTTPS Listening on ' + httpsPort);
	}
